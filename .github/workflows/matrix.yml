name: Build Pluton
on:
  push:
  pull_request:
  release:
    types: [published]

jobs:
  build:
    name: ${{ matrix.target }} Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        target:
          [
            x86_64-pc-windows-msvc,
            aarch64-unknown-linux-gnu,
            armv7-unknown-linux-gnueabihf,
            x86_64-apple-darwin,
            x86_64-unknown-linux-gnu,
          ]
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup MSBuild.exe
        if: matrix.os == 'windows-latest'
        uses: warrenbuckley/Setup-MSBuild@v1

      - name: Setup Cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ matrix.os }}-deps

      - name: Dependencies
        run: yarn

      - name: Build aarch64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: yarn package-arm64

      - name: Build armv7
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: yarn package-arm

      - name: Build Non-aarch64
        if: matrix.target != 'aarch64-unknown-linux-gnu' && matrix.target != 'armv7-unknown-linux-gnueabihf'
        run: yarn package

      - name: Prepare to Deploy
        id: before_deploy
        shell: bash
        run: |
          rm -rf ./release/*.blockmap
          rm -rf ./release/*.zip
          rm -rf ./release/*-unpacked
          rm -rf ./release/mac
          export NAME=$(ls release/pluton-wallet*)
          echo ::set-output name=file_name::${NAME:8}

      # Upload to AMZ
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7 # Or other version
      - name: Install awscli via pipx # Isolates dependencies
        shell: bash
        run: |
          export PATH=~/.local/bin:$PATH
          pip install --user pipx
          pipx install awscli
      - name: S3 Upload
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }} # optional: defaults to us-east-1
          SOURCE_DIR: 'release' # optional: defaults to entire repository
          DEST_DIR: 'pluton'
        run: |
          DATE_WITH_TIME=`date "+%Y%m%d-%H%M"`
          if [ "$RUNNER_OS" == "Windows" ]; then
            ~/.local/bin/aws configure --profile s3-sync-action <<-EOF > /dev/null 2>&1
            ${AWS_ACCESS_KEY_ID}
            ${AWS_SECRET_ACCESS_KEY}
            ${AWS_REGION}
            text
            EOF
            
            ~/.local/bin/aws --endpoint-url ${{ secrets.S3_ENDPOINT }} s3 cp "./${SOURCE_DIR}/${{ steps.before_deploy.outputs.file_name }}" "s3://${AWS_S3_BUCKET}/${DEST_DIR}/${DATE_WITH_TIME}-${{ matrix.target }}-${{ steps.before_deploy.outputs.file_name }}"
            ~/.local/bin/aws configure --profile s3-sync-action <<-EOF > /dev/null 2>&1
            null
            null
            null
            text
            EOF
            
          elif [ "$RUNNER_OS" == "Linux" ]; then
            aws configure --profile s3-sync-action <<-EOF > /dev/null 2>&1
            ${AWS_ACCESS_KEY_ID}
            ${AWS_SECRET_ACCESS_KEY}
            ${AWS_REGION}
            text
            EOF
            
            aws --endpoint-url ${{ secrets.S3_ENDPOINT }} s3 cp "./${SOURCE_DIR}/${{ steps.before_deploy.outputs.file_name }}" "s3://${AWS_S3_BUCKET}/${DEST_DIR}/${DATE_WITH_TIME}-${{ matrix.target }}-${{ steps.before_deploy.outputs.file_name }}"
            aws configure --profile s3-sync-action <<-EOF > /dev/null 2>&1
            null
            null
            null
            text
            EOF
            
          elif [ "$RUNNER_OS" == "macOS" ]; then
            ~/.local/bin/aws configure --profile s3-sync-action <<-EOF > /dev/null 2>&1
            ${AWS_ACCESS_KEY_ID}
            ${AWS_SECRET_ACCESS_KEY}
            ${AWS_REGION}
            text
            EOF
            
            ~/.local/bin/aws --endpoint-url ${{ secrets.S3_ENDPOINT }} s3 cp "./${SOURCE_DIR}/${{ steps.before_deploy.outputs.file_name }}" "s3://${AWS_S3_BUCKET}/${DEST_DIR}/${DATE_WITH_TIME}-${{ matrix.target }}-${{ steps.before_deploy.outputs.file_name }}"
            ~/.local/bin/aws configure --profile s3-sync-action <<-EOF > /dev/null 2>&1
            null
            null
            null
            text
            EOF
